// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  Decimal,
  InstantiateMsg,
  CreateOrUpdateConfig,
  ExecuteMsg,
  OwnerUpdate,
  Uint128,
  InitOrUpdateAssetParams,
  InterestRateModel,
  QueryMsg,
  ConfigResponse,
  Market,
  ArrayOfMarket,
  UncollateralizedLoanLimitResponse,
  ArrayOfUncollateralizedLoanLimitResponse,
  UserCollateralResponse,
  ArrayOfUserCollateralResponse,
  UserDebtResponse,
  ArrayOfUserDebtResponse,
  UserHealthStatus,
  UserPositionResponse,
} from './KawaLending.types'
import { KawaLendingQueryClient, KawaLendingClient } from './KawaLending.client'
export const kawaLendingQueryKeys = {
  contract: [
    {
      contract: 'kawaLending',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...kawaLendingQueryKeys.contract[0], address: contractAddress }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...kawaLendingQueryKeys.address(contractAddress)[0], method: 'config', args }] as const,
  market: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...kawaLendingQueryKeys.address(contractAddress)[0], method: 'market', args }] as const,
  markets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...kawaLendingQueryKeys.address(contractAddress)[0], method: 'markets', args }] as const,
  uncollateralizedLoanLimit: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kawaLendingQueryKeys.address(contractAddress)[0],
        method: 'uncollateralized_loan_limit',
        args,
      },
    ] as const,
  uncollateralizedLoanLimits: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kawaLendingQueryKeys.address(contractAddress)[0],
        method: 'uncollateralized_loan_limits',
        args,
      },
    ] as const,
  userDebt: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...kawaLendingQueryKeys.address(contractAddress)[0], method: 'user_debt', args }] as const,
  userDebts: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...kawaLendingQueryKeys.address(contractAddress)[0], method: 'user_debts', args }] as const,
  userCollateral: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...kawaLendingQueryKeys.address(contractAddress)[0], method: 'user_collateral', args },
    ] as const,
  userCollaterals: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...kawaLendingQueryKeys.address(contractAddress)[0], method: 'user_collaterals', args },
    ] as const,
  userPosition: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...kawaLendingQueryKeys.address(contractAddress)[0], method: 'user_position', args },
    ] as const,
  scaledLiquidityAmount: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...kawaLendingQueryKeys.address(contractAddress)[0],
        method: 'scaled_liquidity_amount',
        args,
      },
    ] as const,
  scaledDebtAmount: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...kawaLendingQueryKeys.address(contractAddress)[0], method: 'scaled_debt_amount', args },
    ] as const,
  underlyingLiquidityAmount: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kawaLendingQueryKeys.address(contractAddress)[0],
        method: 'underlying_liquidity_amount',
        args,
      },
    ] as const,
  underlyingDebtAmount: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...kawaLendingQueryKeys.address(contractAddress)[0],
        method: 'underlying_debt_amount',
        args,
      },
    ] as const,
}
export interface KawaLendingReactQuery<TResponse, TData = TResponse> {
  client: KawaLendingQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface KawaLendingUnderlyingDebtAmountQuery<TData>
  extends KawaLendingReactQuery<Uint128, TData> {
  args: {
    amountScaled: Uint128
    denom: string
  }
}
export function useKawaLendingUnderlyingDebtAmountQuery<TData = Uint128>({
  client,
  args,
  options,
}: KawaLendingUnderlyingDebtAmountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    kawaLendingQueryKeys.underlyingDebtAmount(client?.contractAddress, args),
    () =>
      client
        ? client.underlyingDebtAmount({
            amountScaled: args.amountScaled,
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingUnderlyingLiquidityAmountQuery<TData>
  extends KawaLendingReactQuery<Uint128, TData> {
  args: {
    amountScaled: Uint128
    denom: string
  }
}
export function useKawaLendingUnderlyingLiquidityAmountQuery<TData = Uint128>({
  client,
  args,
  options,
}: KawaLendingUnderlyingLiquidityAmountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    kawaLendingQueryKeys.underlyingLiquidityAmount(client?.contractAddress, args),
    () =>
      client
        ? client.underlyingLiquidityAmount({
            amountScaled: args.amountScaled,
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingScaledDebtAmountQuery<TData>
  extends KawaLendingReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
    denom: string
  }
}
export function useKawaLendingScaledDebtAmountQuery<TData = Uint128>({
  client,
  args,
  options,
}: KawaLendingScaledDebtAmountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    kawaLendingQueryKeys.scaledDebtAmount(client?.contractAddress, args),
    () =>
      client
        ? client.scaledDebtAmount({
            amount: args.amount,
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingScaledLiquidityAmountQuery<TData>
  extends KawaLendingReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
    denom: string
  }
}
export function useKawaLendingScaledLiquidityAmountQuery<TData = Uint128>({
  client,
  args,
  options,
}: KawaLendingScaledLiquidityAmountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    kawaLendingQueryKeys.scaledLiquidityAmount(client?.contractAddress, args),
    () =>
      client
        ? client.scaledLiquidityAmount({
            amount: args.amount,
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingUserPositionQuery<TData>
  extends KawaLendingReactQuery<UserPositionResponse, TData> {
  args: {
    user: string
  }
}
export function useKawaLendingUserPositionQuery<TData = UserPositionResponse>({
  client,
  args,
  options,
}: KawaLendingUserPositionQuery<TData>) {
  return useQuery<UserPositionResponse, Error, TData>(
    kawaLendingQueryKeys.userPosition(client?.contractAddress, args),
    () =>
      client
        ? client.userPosition({
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingUserCollateralsQuery<TData>
  extends KawaLendingReactQuery<ArrayOfUserCollateralResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
    user: string
  }
}
export function useKawaLendingUserCollateralsQuery<TData = ArrayOfUserCollateralResponse>({
  client,
  args,
  options,
}: KawaLendingUserCollateralsQuery<TData>) {
  return useQuery<ArrayOfUserCollateralResponse, Error, TData>(
    kawaLendingQueryKeys.userCollaterals(client?.contractAddress, args),
    () =>
      client
        ? client.userCollaterals({
            limit: args.limit,
            startAfter: args.startAfter,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingUserCollateralQuery<TData>
  extends KawaLendingReactQuery<UserCollateralResponse, TData> {
  args: {
    denom: string
    user: string
  }
}
export function useKawaLendingUserCollateralQuery<TData = UserCollateralResponse>({
  client,
  args,
  options,
}: KawaLendingUserCollateralQuery<TData>) {
  return useQuery<UserCollateralResponse, Error, TData>(
    kawaLendingQueryKeys.userCollateral(client?.contractAddress, args),
    () =>
      client
        ? client.userCollateral({
            denom: args.denom,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingUserDebtsQuery<TData>
  extends KawaLendingReactQuery<ArrayOfUserDebtResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
    user: string
  }
}
export function useKawaLendingUserDebtsQuery<TData = ArrayOfUserDebtResponse>({
  client,
  args,
  options,
}: KawaLendingUserDebtsQuery<TData>) {
  return useQuery<ArrayOfUserDebtResponse, Error, TData>(
    kawaLendingQueryKeys.userDebts(client?.contractAddress, args),
    () =>
      client
        ? client.userDebts({
            limit: args.limit,
            startAfter: args.startAfter,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingUserDebtQuery<TData>
  extends KawaLendingReactQuery<UserDebtResponse, TData> {
  args: {
    denom: string
    user: string
  }
}
export function useKawaLendingUserDebtQuery<TData = UserDebtResponse>({
  client,
  args,
  options,
}: KawaLendingUserDebtQuery<TData>) {
  return useQuery<UserDebtResponse, Error, TData>(
    kawaLendingQueryKeys.userDebt(client?.contractAddress, args),
    () =>
      client
        ? client.userDebt({
            denom: args.denom,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingUncollateralizedLoanLimitsQuery<TData>
  extends KawaLendingReactQuery<ArrayOfUncollateralizedLoanLimitResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
    user: string
  }
}
export function useKawaLendingUncollateralizedLoanLimitsQuery<
  TData = ArrayOfUncollateralizedLoanLimitResponse,
>({ client, args, options }: KawaLendingUncollateralizedLoanLimitsQuery<TData>) {
  return useQuery<ArrayOfUncollateralizedLoanLimitResponse, Error, TData>(
    kawaLendingQueryKeys.uncollateralizedLoanLimits(client?.contractAddress, args),
    () =>
      client
        ? client.uncollateralizedLoanLimits({
            limit: args.limit,
            startAfter: args.startAfter,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingUncollateralizedLoanLimitQuery<TData>
  extends KawaLendingReactQuery<UncollateralizedLoanLimitResponse, TData> {
  args: {
    denom: string
    user: string
  }
}
export function useKawaLendingUncollateralizedLoanLimitQuery<
  TData = UncollateralizedLoanLimitResponse,
>({ client, args, options }: KawaLendingUncollateralizedLoanLimitQuery<TData>) {
  return useQuery<UncollateralizedLoanLimitResponse, Error, TData>(
    kawaLendingQueryKeys.uncollateralizedLoanLimit(client?.contractAddress, args),
    () =>
      client
        ? client.uncollateralizedLoanLimit({
            denom: args.denom,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingMarketsQuery<TData>
  extends KawaLendingReactQuery<ArrayOfMarket, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useKawaLendingMarketsQuery<TData = ArrayOfMarket>({
  client,
  args,
  options,
}: KawaLendingMarketsQuery<TData>) {
  return useQuery<ArrayOfMarket, Error, TData>(
    kawaLendingQueryKeys.markets(client?.contractAddress, args),
    () =>
      client
        ? client.markets({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingMarketQuery<TData> extends KawaLendingReactQuery<Market, TData> {
  args: {
    denom: string
  }
}
export function useKawaLendingMarketQuery<TData = Market>({
  client,
  args,
  options,
}: KawaLendingMarketQuery<TData>) {
  return useQuery<Market, Error, TData>(
    kawaLendingQueryKeys.market(client?.contractAddress, args),
    () =>
      client
        ? client.market({
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingConfigQuery<TData>
  extends KawaLendingReactQuery<ConfigResponse, TData> {}
export function useKawaLendingConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: KawaLendingConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    kawaLendingQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface KawaLendingUpdateAssetCollateralStatusMutation {
  client: KawaLendingClient
  msg: {
    denom: string
    enable: boolean
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingUpdateAssetCollateralStatusMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KawaLendingUpdateAssetCollateralStatusMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, KawaLendingUpdateAssetCollateralStatusMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateAssetCollateralStatus(msg, fee, memo, funds),
    options,
  )
}
export interface KawaLendingLiquidateMutation {
  client: KawaLendingClient
  msg: {
    collateralDenom: string
    recipient?: string
    user: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingLiquidateMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KawaLendingLiquidateMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, KawaLendingLiquidateMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.liquidate(msg, fee, memo, funds),
    options,
  )
}
export interface KawaLendingRepayMutation {
  client: KawaLendingClient
  msg: {
    onBehalfOf?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingRepayMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, KawaLendingRepayMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, KawaLendingRepayMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.repay(msg, fee, memo, funds),
    options,
  )
}
export interface KawaLendingBorrowMutation {
  client: KawaLendingClient
  msg: {
    amount: Uint128
    denom: string
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingBorrowMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, KawaLendingBorrowMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, KawaLendingBorrowMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.borrow(msg, fee, memo, funds),
    options,
  )
}
export interface KawaLendingWithdrawMutation {
  client: KawaLendingClient
  msg: {
    amount?: Uint128
    denom: string
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingWithdrawMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KawaLendingWithdrawMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, KawaLendingWithdrawMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.withdraw(msg, fee, memo, funds),
    options,
  )
}
export interface KawaLendingDepositMutation {
  client: KawaLendingClient
  msg: {
    onBehalfOf?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingDepositMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KawaLendingDepositMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, KawaLendingDepositMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.deposit(msg, fee, memo, funds),
    options,
  )
}
export interface KawaLendingUpdateUncollateralizedLoanLimitMutation {
  client: KawaLendingClient
  msg: {
    denom: string
    newLimit: Uint128
    user: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingUpdateUncollateralizedLoanLimitMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KawaLendingUpdateUncollateralizedLoanLimitMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, KawaLendingUpdateUncollateralizedLoanLimitMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateUncollateralizedLoanLimit(msg, fee, memo, funds),
    options,
  )
}
export interface KawaLendingUpdateAssetMutation {
  client: KawaLendingClient
  msg: {
    denom: string
    params: InitOrUpdateAssetParams
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingUpdateAssetMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KawaLendingUpdateAssetMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, KawaLendingUpdateAssetMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateAsset(msg, fee, memo, funds),
    options,
  )
}
export interface KawaLendingInitAssetMutation {
  client: KawaLendingClient
  msg: {
    denom: string
    params: InitOrUpdateAssetParams
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingInitAssetMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KawaLendingInitAssetMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, KawaLendingInitAssetMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.initAsset(msg, fee, memo, funds),
    options,
  )
}
export interface KawaLendingUpdateConfigMutation {
  client: KawaLendingClient
  msg: {
    config: CreateOrUpdateConfig
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KawaLendingUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, KawaLendingUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
export interface KawaLendingUpdateOwnerMutation {
  client: KawaLendingClient
  msg: OwnerUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useKawaLendingUpdateOwnerMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KawaLendingUpdateOwnerMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, KawaLendingUpdateOwnerMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateOwner(msg, fee, memo, funds),
    options,
  )
}
